<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://camel.apache.org/schema/spring 
    http://camel.apache.org/schema/spring/camel-spring.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd" 
    >
    
    <context:property-placeholder  location="classpath:/aws.properties" />
    <bean name="sqsClient" class="com.amazonaws.services.sqs.AmazonSQSAsyncClient">
        <constructor-arg>
            <bean class="com.amazonaws.auth.BasicAWSCredentials">
                <constructor-arg value="${access.key}"/>
                <constructor-arg value="${secret.key}"/>
            </bean>
        </constructor-arg>
    </bean>

	<bean id="marcSplitter" class="edu.harvard.libcomm.pipeline.MarcSplitter"/>
	<!-- <bean id="marcProcessor" class="edu.harvard.libcomm.pipeline.MarcProcessor"/>-->
	<bean id="modsProcessor" class="edu.harvard.libcomm.pipeline.ModsProcessor"/>
	<bean id="holdingsProcessor" class="edu.harvard.libcomm.pipeline.HoldingsProcessor"/>
		
    <!-- <bean id="marcProcessorCamel" class="edu.harvard.libcomm.pipeline.LibCommProcessor">
        <property name="processor">
            <ref bean="marcProcessor"/>
        </property>
    </bean>-->

    <bean id="modsProcessorCamel" class="edu.harvard.libcomm.pipeline.LibCommProcessor">
        <property name="processor">
            <ref bean="modsProcessor"/>
        </property>
    </bean>

    <bean id="holdingsProcessorCamel" class="edu.harvard.libcomm.pipeline.LibCommProcessor">
        <property name="processor">
            <ref bean="holdingsProcessor"/>
        </property>
    </bean>

    <camelContext id="sqsContext" xmlns="http://camel.apache.org/schema/spring">
 
 		<!-- 
 		aleph-ingest route reads xml messages from directory that contain corresponding marc (.mrc) files
 		converts marc communication format to marcxml, chunks into files of 25 and writes to specified directory
 		xml messages sent to queue
 		 -->
        <route id="aleph-ingest">
            <from uri="file:/temp/aleph?include=.*.xml" />
 			<log message="aleph ingest ${body}"/>
            <split streaming="true">
                <method bean="marcSplitter" method="splitMarcFile"/>
                <to uri="file:/temp/aleph/marcxml?fileName=${header.CamelSplitIndex}"/>
            </split>

            <!-- <process ref="marcProcessorCamel"/> -->
            <to uri="mock:alephFileMessages"/>
            <!-- <to uri="aws-sqs://marc21Ingest?accessKey=${access.key}&amp;secretKey=${secret.key}&amp;amazonSQSClient=#sqsClient" /> -->
 			<log message="received on aleph ${body}"/>
         </route>
 
  		<!-- 
 		marctomods route reads marcxml from specified dir, validates, converts marcxml to mods
 		mods wrapped in libcomm message and sent to queue (can be file, aws, etc)
 		 -->         
   
        <route id="marctomods">
            <from uri="file:/temp/aleph/marcxml" />
            <process ref="modsProcessorCamel"/>
            <to uri="file:/temp/aleph/mods"/>
            <!--<to uri="aws-sqs://viaIngest?accessKey=${access.key}&amp;secretKey=${secret.key}&amp;amazonSQSClient=#sqsClient" />-->
 			<log message="marcxml to mods ${file:name}"/>
        </route>

        <route id="addholdingstomods">
            <from uri="file:/temp/aleph/mods" />
            <process ref="holdingsProcessorCamel"/>
            <to uri="file:/temp/aleph/enhancedmods"/>
            <!--<to uri="aws-sqs://viaIngest?accessKey=${access.key}&amp;secretKey=${secret.key}&amp;amazonSQSClient=#sqsClient" />-->
 			<log message="holdings added ${file:name}"/>
        </route>
        
<!-- 
        <route id="modstosolr">
            <from uri="aws-sqs://modsQueue?accessKey=${access.key}&amp;secretKey=${secret.key}&amp;amazonSQSClient=#sqsClient" />
            <to uri="aws-sqs://solrQueue?accessKey=${access.key}&amp;secretKey=${secret.key}&amp;amazonSQSClient=#sqsClient" />
 			<log message="to mods do solr ${file:name}"/>
        </route>        
-->              
    </camelContext>
    
    
</beans>
